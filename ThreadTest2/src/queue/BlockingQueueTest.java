package queue;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;



/*
 * 阻塞队列，当存数据的速度小于取数据的速度会出现等待的情况，当存放数据后，取数据的线程会立刻取出数据
 */
public class BlockingQueueTest {
	public static void main(String[] args) {
		List list = new ArrayList<String>();
		final Lock myLock=new ReentrantLock();
		//阻塞队列中可以存放3个数据
		final BlockingQueue queue = new ArrayBlockingQueue(3);
		for(int i=0;i<2;i++){
			new Thread(){
				public void run(){
					while(true){
						try {
					
						Thread.sleep((long)(Math.random()*1000));
							System.out.println(Thread.currentThread().getName() + "准备放数据!");							
							queue.put(1);
							
								System.out.println(Thread.currentThread().getName() + "已经放了数据，" + 							
								"队列目前有" + queue.size() + "个数据");
						} catch (InterruptedException e) {
							e.printStackTrace();
							}
					
					}
					
				}
			}.start();
			
		}
		
		new Thread(){
			public void run(){
				while(true){
					try {
						
						//将此处的睡眠时间分别改为100和1000，观察运行结果
						Thread.sleep(1000);
						System.out.println(Thread.currentThread().getName() + "准备取数据!");
						queue.take();
						System.out.println(Thread.currentThread().getName() + "已经取走数据，" + 							
								"队列目前有" + queue.size() + "个数据");					
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					
				}
			}
			
		}.start();			
	
}
}